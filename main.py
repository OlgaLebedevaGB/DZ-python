# За день машина проезжает n километров. Сколько
# дней нужно, чтобы проехать маршрут длиной m
# километров? При решении этой задачи нельзя
# пользоваться условной инструкцией if и циклами.
# Input:
# n = 700
# m = 750
# Output:
# 2
# вариант 1
# n = int(input('Введите расстояние, которое машина проезжает за день: '))
# m = int(input('Введите длинну маршрута: '))
# # print(f'Требуется {math.ceil(n/m)} дней')
# day = m//n + (m%n > 0)
# # За день машина проезжает n километров. Сколько
# дней нужно, чтобы проехать маршрут длиной m
# километров? При решении этой задачи нельзя
# пользоваться условной инструкцией if и циклами.
# Input:
# n = 700
# m = 750
# Output:
# 2
# вариант 1
# n = int(input('Введите расстояние, которое машина проезжает за день: '))
# m = int(input('Введите длинну маршрута: '))
# # print(f'Требуется {math.ceil(n/m)} дней')
# day = m//n + (m%n > 0)
# вариант 2 
# n = int(input('Введите расстояние, которое машина проезжает за день: '))
# m = int(input('Введите длинну маршрута: '))
# day =
# print(-5//2)

# В некоторой школе решили набрать три новых
# математических класса и оборудовать кабинеты для
# них новыми партами. За каждой партой может сидеть
# два учащихся. Известно количество учащихся в
# каждом из трех классов. Выведите наименьшее
# число парт, которое нужно приобрести для них.
# Input: 20 21 22(ввод чисел НЕ в одну строку)
# Output: 32

# a = int(input('Введите количество учащихся в 1 математическом классе: '))
# b = int(input('Введите количество учащихся в 1 математическом классе: '))
# c = int(input('Введите количество учащихся в 1 математическом классе: '))
# print(f'Минимальное количество парт: {-(-a // 2) + -(-b // 2) + -(-c // 2)}')

# Дано натуральное число. Требуется определить,
# является ли год с данным номером високосным. Если
# год является високосным, то выведите YES, иначе
# выведите NO. Напомним, что в соответствии с
# григорианским календарем, год является
# високосным, если его номер кратен 4, но не кратен
# 100, а также если он кратен 400.
# # Input: 2016
# Output: Yes
# n = int(input('Введите расстояние, которое машина проезжает за день: '))
# m = int(input('Введите длинну маршрута: '))
# day =
# print(-5//2)

# В некоторой школе решили набрать три новых
# математических класса и оборудовать кабинеты для
# них новыми партами. За каждой партой может сидеть
# два учащихся. Известно количество учащихся в
# каждом из трех классов. Выведите наименьшее
# число парт, которое нужно приобрести для них.
# Input: 20 21 22(ввод чисел НЕ в одну строку)
# Output: 32

# a = int(input('Введите количество учащихся в 1 математическом классе: '))
# b = int(input('Введите количество учащихся в 1 математическом классе: '))
# c = int(input('Введите количество учащихся в 1 математическом классе: '))
# print(f'Минимальное количество парт: {-(-a // 2) + -(-b // 2) + -(-c // 2)}')

# Дано натуральное число. Требуется определить,
# является ли год с данным номером високосным. Если
# год является високосным, то выведите YES, иначе
# выведите NO. Напомним, что в соответствии с
# григорианским календарем, год является
# високосным, если его номер кратен 4, но не кратен
# 100, а также если он кратен 400.
# # Input: 2016
# Output: Yes
# 1 вариант
# year = int(input('Введите год: '))
# if (year % 4 == 0 and year % 100 != 0 or year % 400 == 0):
#     print('Год високосный')
# else:
#     print ("Год не високосный")
# 2 вариант:
# 2016print(f"{year} високосный")
# year = int(input('Введите год: '))
# if(year%4 == 0) and (year%100 != 0):
#     print(f"{year} високосный")
# elif year%400 == 0:
#     print(f"{year} високосный")
# else:
#     print(f"{year} не високосный")

# тернарный оператор
# year = int(input('Введите год: '))
# # что сделать           при каком условии                              что сделать иначе
# print("високосный" if ((year%4 == 0) and (year%100 != 0)) or (year%400 == 0) else f"не високосный")

# Задача 2: Найдите сумму цифр трехзначного числа.
# *Пример:*
# 123 -> 6 (1 + 2 + 3)
# 100 -> 1 (1 + 0 + 0) 

# num = int(input('Введите трёхзначное число: '))
# sum = 0
# while num > 0:
#     count = num%10
#     num = num//10
#     sum = sum + count
# print(f"Сумма цифр равна = {sum}")

# Задача 4: Петя, Катя и Сережа делают из бумаги журавликов.
#  Вместе они сделали S журавликов. Сколько журавликов сделал каждый ребенок, 
# если известно, что Петя и Сережа сделали одинаковое количество журавликов, 
# а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?
# *Пример:*
# 6 -> 1  4  1
# 24 -> 4  16  4
# 60 -> 10  40  10
# num = int(input('Введите количество журавликов: '))
# print(f"Петя сделал {num//3//2} журавликов")
# print(f"Катя сделала {num//3*2} журавликов")
# print(f"Серёжа сделал {num//3//2} журавликов")

# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались 
# за проезд и получали билет с номером. Счастливым билетом называют такой 
# билет с шестизначным номером, где сумма первых трех цифр равна сумме 
# последних трех. Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6. 
# Вам требуется написать программу, которая проверяет счастливость билета.
# *Пример:*
# 385916 -> yes
# 123456 -> no
# num = int(input('Введите номер билета '))
# num1 = num//1000
# sum1 = 0
# while num1 > 0:
#     count = num1%10
#     num1 = num1//10
#     sum1 = sum1 + count
# num2 = num%1000
# sum2 = 0
# while num2 > 0:
#     count = num2%10
#     num2 = num2//10
#     sum2 = sum2 + count
# if(sum1 == sum2):
#     print('Счастливый билет')
# else:
#     print ("Несчастливый билет")

# Задача 8: Требуется определить, можно ли от шоколадки
#  размером n × m долек отломить k долек, если разрешается сделать 
# один разлом по прямой между дольками (то есть разломить шоколадку на два прямоугольника).
# *Пример:*
# 3 2 4 -> yes
# 3 2 1 -> no
# n = int(input('Введите сторону n шоколадки: '))
# m = int(input('Введите сторону m шоколадки: '))
# k = int(input('Введите количество долек(k), которое необходимо отломить за 1 разлом: '))
# if(k%m == 0 or k%n == 0) and (k < m*n):
#     print('yes')
# else:
#     print('no')

# семинар2

# По данному целому неотрицательному n вычислите 
# значение n!. N! = 1 * 2 * 3 * … * N 
# (произведение всех чисел от 1 до N) 0! = 1
# Решить задачу используя цикл while
# Input:       5
# Output:    120

# fact = int(input("Введите число: "))
# result = 1
# while fact > 0:
#     result *= fact
#     fact -= 1
# print(result)

# # ИЛИ

# n = int(input('Enter number pls: '))
# i = 1
# fact = 1
# while i <= n:
#     fact, i = fact*i, i+1
# print(fact)

# или

# x = int(input("Введите число: "))
# factorial = 1
# a = 1 #счетчик
# while a <= x:
#     factorial = factorial * a
#     a = a + 1
# else:   
#     print(factorial)

# Дано натуральное число A > 1. Определите, каким по счету 
# числом Фибоначчи оно является, то есть выведите такое 
# число n, что φ(n)=A. Если А не является числом Фибоначчи, 
# выведите число -1.
# Input:     5
# Output:  6

# fibo = int(input("Введите число: "))
# tepm1 = 0
# tepm2 = 1
# index = 2
# while tepm2 < fibo:
#     tepm1, tepm2, index = tepm2, tepm1+tepm2, index + 1
# if tepm2 == fibo:
#     print(index)
# else:
#     print(-1)

# или

# num = int(input('Enter number pls: '))
# fib1, fib2 = 0, 1
# n = 2
# while fib2 < num:
#     fib1, fib2 = fib2, fib1 + fib2
#     n += 1
# print(n if fib2 == num else -1)# тернарный оператор

# Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это самая длинная оттепель за всю историю наблюдений за погодой. Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями статистики за прошлые годы. Их интересует, сколько дней длилась самая длинная оттепель. Оттепелью они называют период, в который среднесуточная температура ежедневно превышала 0 градусов Цельсия. Напишите программу, помогающую синоптикам в работе.
# Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках располагается N целых чисел. 
# Каждое число – среднесуточная температура в соответствующий день. Температуры – целые числа и лежат в диапазоне от –50 до 50

# Input:    6 -> -20 30 -40 50 10 -10
# Output: 2

# n = int(input("Введите число дней: "))
# counter = 0
# maxValue = 0
# for _ in range(n):
#     newNumber = int(input("Введите число: "))
#     if newNumber > 0:
#         counter += 1
#         if counter > maxValue:
#             maxValue = counter
#     else:
#         counter = 0
# print(maxValue)

# 15. Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя, а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей, а для тещи полегче. Но вот незадача: арбузов слишком много и он не знает как же выбрать самый легкий и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N – количество арбузов. Вторая строка содержит N чисел, записанных на новой строчке каждое. Здесь каждое число – это масса соответствующего арбуза
# Input:	5 -> 5 1 6 5 9
# Output:	1 9

# n = int(input('N: '))

# min_weight = int(input('Weight: '))
# max_weight = min_weight
# for _ in range(n - 1):
#     weight = int(input('Weight: '))
#     if weight < min_weight:
#         min_weight = weight
#     elif weight > max_weight:
#         max_weight = weight
# print(min_weight, max_weight)

# # или
# import random

# n = int(input('N: '))

# min_weight = random.randint(1, 10)
# print(min_weight)
# max_weight = min_weight
# for i in range(n - 1):
#     weight = random.randint(1, 10)
#     print(weight)
#     if weight < min_weight:
#         min_weight = weight
#     elif weight > max_weight:
#         max_weight = weight
# print(min_weight, max_weight)

# СПИСКИ
# list_1 = [] # Создание пустого списка или масства
# list_2 = list() # Создание пустого списка с помощью функции list()
# list_1 = [7, 9, 11, 13, 15, 17] # создание списка(массива) с данными
# print(list_1) #[7, 9, 11, 13, 15, 17]
# print(*list_1) # 7 9 11 13 15 17 печать без скобочек и запятых

# list_1 = [7, 9, 11, 13, 15, 17]
# print(list_1[0]) # 7

# Чтобы узнать количество элементов в списке необходимо использовать функцию
# len(имя_списка):
# list_1 = [7, 9, 11, 13, 15, 17]
# print(len(list_1)) # 6

# Можно список заполнять не только при его создание, но и во время работы
# программы:
# list_1 = list() # создание пустого списка
# for i in range(5): # цикл выполнится 5 раз
#     n = int(input()) # пользователь вводит целое число
#     list_1.append(n) # сохранение элемента в конец списка
# print(list_1)
# 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
# [12, 7, -1, 21, 0]

# list_1 = list() # создание пустого списка
# print(list_1) #[]
# for i in range(5): # цикл выполнится 5 раз
#     list_1.append(i) # сохранение элемента в конец списка
#     print(list_1)
# # 1-я итерация цикла(повторение 1): [0]
# # 2-я итерация цикла(повторение 2): [0, 1]
# # 3-я итерация цикла(повторение 3): [0, 1, 2]
# # 4-я итерация цикла(повторение 4): [0, 1, 2, 3]
# # 5-я итерация цикла(повторение 5): [0, 1, 2, 3, 4]

# Взаимодействие цикла for со списком:
# list_1 = [12, 7, -1, 21, 0]
# for i in list_1:
#     print(i) # вывод каждого элемента списка
# # 1-я итерация цикла(повторение 1): i = 12
# # 2-я итерация цикла(повторение 2): i = 7
# # 3-я итерация цикла(повторение 3): i = -1
# # 4-я итерация цикла(повторение 4): i = 21
# # 5-я итерация цикла(повторение 5): i = 0

# list_1 = [12, 7, -1, 21, 0]
# for i in range(len(list_1)):
#     print(list_1[i]) # вывод каждого элемента списка
# # 1-я итерация цикла(повторение 1): list_1[0] = 12
# # 2-я итерация цикла(повторение 2): list_1[1] = 7
# # 3-я итерация цикла(повторение 3): list_1[2] = -1
# # 4-я итерация цикла(повторение 4): list_1[3] = 21
# # 5-я итерация цикла(повторение 5): list_1[4] = 0

# Добавление элементов в список:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1) #[12, 7, -1, 21, 0]
# list_1.append(6) 
# print(list_1) #[12, 7, -1, 21, 0, 6]


# Основные действия со списками:
#     Удаление последнего элемента списка.
#     Метод pop удаляет последний элемент из списка:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 0 удалится последний элемент
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]
# print(list_1.pop()) # -1
# print(list_1) # [12, 7]

# удаление полследнего элемента и присвоение его значения переменной
# list_1 = [12, 7, -1, 21]
# print(list_1)
# a = list_1.pop()
# print(a)
# print(list_1)

    # Удаление конкретного элемента из списка.
    # Надо указать значение индекса в качестве аргумента функции pop:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 12
# print(list_1) # [7, -1, 21, 0]

    # Добавление элемента на нужную позицию.
    # Функция insert — указание индекса (позиции) и значения.
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.insert(2, 11))
# print(list_1) # [12, 7, 11, -1, 21, 0]

# Срез списка
# ● Отрицательное число в индексе — счёт с конца списка
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0]) # 1
# print(list_1[1]) # 2
# print(list_1[len(list_1)-1]) # 10
# print(list_1[-5]) # 6
# print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] двоеточие(перед дв то откуда начинаем, после дв то чем заканчиваем)
# print(list_1[:2]) # [1, 2]
# print(list_1[len(list_1)-2:]) #[9, 10]
# print(list_1[2:9]) # [3, 4, 5, 6, 7, 8, 9]
# print(list_1[6:-18]) # []
# print(list_1[0:len(list_1):6]) # [1, 7] два двоеточия(перед дв то откуда начинаем, после дв то чем заканчиваем, после вт дв - шаг)
# print(list_1[::6]) # [1, 7]



# Кортеж — это неизменяемый список.
# t = () # создание пустого кортежа
# print(type(t)) # class <'tuple'>
# t = (1,) #что бы сделать кортеж, c типом tuple, а не int, нужно полсле числа поставить запятую
# print(type(t))
# t = (1)
# print(type(t))
# t = (28, 9, 1990)
# print(type(t))

# test_tuple = (1, 2, 3)
# test_list = [1, 2, 3]
# print(f'Type: {test_tuple}, size: {test_tuple.__sizeof__()}')
# print(f'Type: {test_list}, size: {test_list.__sizeof__()}')

# v = [1, 8, 9] #из массива с классом list перевод в кортеж c tuple
# print(v)
# print(type(v))
# v = tuple(v)
# print(v)
# print(type(v))
# a, b, c = v #распаковка картежа или присваивание значений картежа переменным
# print (a)
# print (b)
# print (c)

# t= (1, 2, 3, 5,)
# for i in t:
#     print(i)
# # или
# for i in range(len(t)):
#     print(t[i])

# colors = ['red', 'green', 'blue']
# print(colors) # ['red', 'green', 'blue']
# print(type(colors)) #class 'list'
# t = tuple(colors)
# print(t) #('red', 'green', 'blue')
# print(type(t)) #class 'tuple'
# t = tuple(['red', 'green', 'blue'])
# print(t[0]) # red
# print(t[2]) # blue
# for e in t:
#     print(e) # red green blue
# t[0] = 'black' # TypeError: 'tuple' object does not support(нельзя изменять
# # кортеж)
  

# Словари
# Словари — неупорядоченные коллекции произвольных объектов с
# доступом по ключу.
# В списках в качестве ключа используется индекс элемента. В словаре для
# определения элемента используется значение ключа (строка, число).

# dictionary = {} #чтобы создать словарь - нужно круглые скобочки, ключ, двоеточие,значение
# # dictionary = dict() # или функция dict ()
# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left']) # ←
# # типы ключей могут отличаться
# print(dictionary['up']) # ↑
# # типы ключей могут отличаться
# dictionary['left'] = '⇐' # замена значения в словаре
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type' - отсутствие ключа в словаре
# del dictionary['left'] # удаление элемента из словаря

# for item in dictionary: 
#     print(item) #вывод ключей

# for item in dictionary: 
#     print('{}: {}'.format(item, dictionary[item])) # вывод ключ: элемент (up: ↑ left: ← down: ↓ right: →)

# print(dictionary.items()) #dict_items([('up', '↑'), ('left', '←'), ('down', '↓'), ('right', '→')]) перевод словаря в картеж(где k - ключ, v- значение)
# for (k,v) in dictionary.items(): #
#     print(k, v)

# dictionary[12] = 12345 #добавление элементов в словарь
# print(dictionary)

# преобразование в верхний регистр
# word = input("Введите слово: ").upper()


# Множества
# Множества содержат в себе уникальные элементы, не обязательно
# упорядоченные - не могут повторяться
# Одно множество может содержать значения любых типов. Если у Вас есть два
# множества, Вы можете совершать над ними любые стандартные операции,
# например, объединение, пересечение и разность. Давайте разберем их.

# colors = {'red', 'green', 'blue'} #чтобы создать множество - нужно круглые скобочки
# #colors = set() # f создания множества 
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red') # добавление значения с помощью f add
# print(colors) # {'red', 'green', 'blue'} #не добавилось, так как уже существует такое
# colors.add('gray')  # добавление значения с помощью f add
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # удаление значения с помощью f remove
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red' - ошибка при удалении значения, которого итак нет
# colors.discard('red') # f которая проверяет наличие значения и удаляет его, если значения нет пропускает строку кода без ошибки
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # f удаления всех значений множества
# print(colors) # set() - выводится пустое множесво

# Операции со множествами в Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8} #копирование множества
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} # объедидение множеств - только неповторяющиеся данные
# i = a.intersection(b) # i = {8, 2, 5} #пересечение множеств - данные кторые есть в обоих множествах
# dl = a.difference(b) # dl = {1, 3} #разность а-b (все одинаковые значения которые есть b вычитаем из a)
# dr = b.difference(a) # dr = {13, 21} #разность b-a (все одинаковые значения которые есть в a вычитаем из b)
# q = a.union(b).difference(a.intersection(b)) # {1, 21, 3, 13} # находим пересечение в(), объединяем множества и вычитаем пересечение
    #    2           3            1

# Неизменяемое или замороженное множество(frozenset) — множество, с которым
# не будут работать методы удаления и добавления
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})


# List Comprehension
# генератора списка
# это упрощенный подход к созданию списка, который
# задействует цикл for, а также инструкции if-else для определения того, что в итоге
# окажется в финальном списке.

# 1. Простая ситуация — список:
# list_1 = [exp for item in iterable]
# пример:
# list_1 = [None for item in range(5)]
# print(list_1)

# 2. Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)]
# пример 1:Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]
# print(list_1)
# или
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
# print(list_1) # [1, 2, 3,..., 100]

# пример 2: Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100. Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]
# print(list_1)

# Задача: Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),..., (100, 100)]
# print(list_1)
# или в паре (число и квадрат числа)
# list_1 = [(i, i*i) for i in range(1, 101) if i % 2 == 0] # [(2, 4), (4, 16), (6, 36),...,(100, 10000)]
# print(list_1)

# Задача: Также можно умножать, делить, прибавлять, вычитать. Например, умножить
# значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]



# my_list = [534, 'ddfg', [534, 234], True]

# for item in my_list:
#     print(item)

# # 0, 1, 2, 3
# #                     4
# for i in range(len(my_list)):
#     print(my_list[i])
#     if my_list[i] == 534:
#         my_list[i] = 0


# Дан список чисел. Определите, сколько в нем встречается различных чисел.
# Input: [1, 1, 2, 0, -1, 3, 4, 4]
# Output: 6
# arr = [1, 1, 2, 0, -1, 3, 4, 4]
# arrat_2 = set(arr)
# print(arrat_2)
# print(len(arrat_2))

# Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность (сдвиг - циклический) на K элементов вправо,  K – положительное число.
# Input:   [1, 2, 3, 4, 5] k = 3
# Output:  [3, 4, 5, 1, 2]

# list_1 = [1, 2, 3, 4, 5, 6, 7, 89]
# k = int(input("Введите число: "))
# result = list_1[len(list_1)-k:] + list_1[:len(list_1)-k]
#                 # 7, 89              1,2,3,4,5,6
# print(result)

#  или

# a = [1, 2, 3, 4, 5] 
# print(*a)
# k = int(input()) 
# for i in range(k):  
#     a.insert(0, a.pop(-1)) 
# print(*a)

# Напишите программу для печати всех уникальных значений в словаре. 
# Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
# start_lst = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 
# my_set = set()

# for i in range(len(start_lst)):
#     for val in start_lst[i].values():
#         my_set.add(val)
# print(my_set)
# или
# start_lst = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 
# my_set = set()
# for my_dict in start_lst:
#     for val in my_dict.values():
#         my_set.add(val)
# print(my_set)

# Дан массив, состоящий из целых чисел. Напишите программу, которая подсчитает количество элементов массива, больших предыдущего (элемента с предыдущим номером) 
# Input: [0, -1, 5, 2, 3]
# Output: 2 
# Пояснение: (-1 < 5, 2 < 3)
# my_lst = [0, -1, 5, 2, 3]
# count = 0
# for i in range(1, len(my_lst)):
#     if my_lst[i] > my_lst[i - 1]:
#         count += 1
# print(count)